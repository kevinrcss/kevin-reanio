// <auto-generated />
using System;
using DelfostiChallenge.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DelfostiChallenge.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.PedidoDetalleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PedidoDetalles", (string)null);
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.PedidoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaDespacho")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaRecepcion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NumeroPedido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RepartidorId")
                        .HasColumnType("int");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepartidorId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.ProductoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Etiquetas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int>("UnidadMedida")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Producto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Etiquetas = "1,2",
                            Nombre = "Laptop Pro X1",
                            Precio = 1299.99m,
                            Sku = "LAP001",
                            Tipo = 1,
                            UnidadMedida = 1
                        },
                        new
                        {
                            Id = 2,
                            Etiquetas = "2,4",
                            Nombre = "Monitor UltraWide 34\"",
                            Precio = 499.99m,
                            Sku = "MON002",
                            Tipo = 2,
                            UnidadMedida = 1
                        },
                        new
                        {
                            Id = 3,
                            Etiquetas = "1,6",
                            Nombre = "Teclado Mecánico RGB",
                            Precio = 129.99m,
                            Sku = "TEC003",
                            Tipo = 3,
                            UnidadMedida = 1
                        },
                        new
                        {
                            Id = 4,
                            Etiquetas = "6,2",
                            Nombre = "Smartphone 5G",
                            Precio = 799.99m,
                            Sku = "SMA004",
                            Tipo = 4,
                            UnidadMedida = 1
                        },
                        new
                        {
                            Id = 5,
                            Etiquetas = "3,5",
                            Nombre = "Laptop Económica",
                            Precio = 449.99m,
                            Sku = "LAP005",
                            Tipo = 1,
                            UnidadMedida = 1
                        },
                        new
                        {
                            Id = 6,
                            Etiquetas = "4,3",
                            Nombre = "Pack Teclado y Mouse Inalámbricos",
                            Precio = 39.99m,
                            Sku = "TEC006",
                            Tipo = 3,
                            UnidadMedida = 2
                        });
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.RolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("Rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Encargado"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Vendedor"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Delivery"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Repartidor"
                        });
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.SecuenciaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UltimoValor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Secuencias", (string)null);
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.UsuarioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "KEVINRC",
                            Correo = "kevin.rc@hotmail.com",
                            IdRol = 1,
                            Nombre = "Kevin Wilson Reaño Cisneros",
                            Password = "BA3253876AED6BC22D4A6FF53D8406C6AD864195ED144AB5C87621B6C233B548BAEAE6956DF346EC8C17F5EA10F35EE3CBC514797ED7DDD3145464E2A0BAB413",
                            Puesto = "Ventas",
                            Telefono = "941573117"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "CUEVA10",
                            Correo = "repartidor@gmail.com",
                            IdRol = 4,
                            Nombre = "Christian Cueva",
                            Password = "BA3253876AED6BC22D4A6FF53D8406C6AD864195ED144AB5C87621B6C233B548BAEAE6956DF346EC8C17F5EA10F35EE3CBC514797ED7DDD3145464E2A0BAB413",
                            Puesto = "Repartidor",
                            Telefono = "987654321"
                        });
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.PedidoDetalleEntity", b =>
                {
                    b.HasOne("DelfostiChallenge.Core.Entities.PedidoEntity", null)
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DelfostiChallenge.Core.Entities.ProductoEntity", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.PedidoEntity", b =>
                {
                    b.HasOne("DelfostiChallenge.Core.Entities.UsuarioEntity", "Repartidor")
                        .WithMany()
                        .HasForeignKey("RepartidorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DelfostiChallenge.Core.Entities.UsuarioEntity", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Repartidor");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.UsuarioEntity", b =>
                {
                    b.HasOne("DelfostiChallenge.Core.Entities.RolEntity", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.PedidoEntity", b =>
                {
                    b.Navigation("PedidoDetalles");
                });

            modelBuilder.Entity("DelfostiChallenge.Core.Entities.RolEntity", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
